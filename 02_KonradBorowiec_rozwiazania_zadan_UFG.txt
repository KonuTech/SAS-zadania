/* ZADANIE 1. */

option mprint mlogic symbolgen;

data B_POLISY;
	input ID :best. RODZAJ :$2. DATA_ZAWARCIA :best. OCHRONA_OD :best. OCHRONA_DO :best.;
	format DATA_ZAWARCIA yymmdd10. OCHRONA_OD yymmdd10. OCHRONA_DO yymmdd10.;
	datalines;
1 OC 21153 21185 21549
2 OC 21257 21258 21622
3 AC 21216 21217 21581
4 AC 21275 21279 21643
;
run;


%LET _RODZAJ = AC;
%LET _DATA_START = '1JAN2018'd;
%put ### RODZAJ ###       : &_rodzaj.;
%put ### DATA_START ###   : &_data_start.;


%MACRO aktywnosc_umow(_rodzaj=, _data_start=);

	data AKTYWNOSC_UMOW;
		set B_POLISY;
		
		length KWARTAL_ZAWARCIA $6. CZY_AKTYWNA_Q1 - CZY_AKTYWNA_Q4 8. ;

		KWARTAL_ZAWARCIA = put(DATA_ZAWARCIA, yyq6.);
		KWARTAL_OD = put(OCHRONA_OD, yyq6.);
		KWARTAL_DO = put(OCHRONA_DO, yyq6.);
		
		%DO i = 1 %to 6;
			%let _nastepny_kwartal = %sysfunc(INTNX(quarter, &_DATA_START., &i.), yyq6.);
			%put ### NASTEPNY_KWARTAL ###   : &_nastepny_kwartal.;
			CZY_AKTYWNA_Q&i = ifn((KWARTAL_OD < "&_nastepny_kwartal." <= KWARTAL_DO), 1, 0);
			
		%END;
		
		where RODZAJ = symget("_rodzaj");
		
		keep ID RODZAJ KWARTAL_ZAWARCIA CZY_AKTYWNA_Q1 - CZY_AKTYWNA_Q6;
	run;

%mend aktywnosc_umow;

%aktywnosc_umow(_rodzaj=&_RODZAJ., _data_start=&_DATA_START.);


proc contents data=B_POLISY order=varnum;run;
proc contents data=AKTYWNOSC_UMOW order=varnum;run;
proc print data=AKTYWNOSC_UMOW;run;











/* ZADANIE 2. */
proc sql;

	CREATE TABLE B_POLISY (
		ID INT,
		RODZAJ VARCHAR(2),
		OCHRONA_OD DATE FORMAT=yymmdd10.,
		OCHRONA_DO DATE FORMAT=yymmdd10.,
		CONSTRAINT B_POLISY_pkey PRIMARY KEY (ID)
)
;quit;
proc sql;

	CREATE TABLE B_SZKODY (
		ID INT,
		ID_POLISY INT,
		TYP_SZKODY VARCHAR(1),
		DATA_ZDARZENIA DATE FORMAT=yymmdd10.,
		CONSTRAINT B_SZKODY_pkey PRIMARY KEY (ID)
)
;quit;
proc sql;
	ALTER TABLE B_SZKODY
	ADD CONSTRAINT B_SZKODY_ID_POLISY_fkey FOREIGN KEY (ID_POLISY) REFERENCES B_POLISY (ID);
quit;
proc sql;
	insert into B_POLISY values (1, 'OC', 21185, 21549);
	insert into B_POLISY values (2, 'OC', 21258, 21622);
	insert into B_POLISY values (3, 'AC', 21217, 21581);
	insert into B_POLISY values (4, 'AC', 21279, 21643);
	insert into B_SZKODY values (1, 1, 'P', 21294);
	insert into B_SZKODY values (2, 1, 'O', 21452);
	insert into B_SZKODY values (3, 2, 'P', 21305);
	insert into B_SZKODY values (4, 3, 'P', 21380);
quit;


/* SQL example*/
proc sql;
	CREATE TABLE sql_example AS
	SELECT
		B_POLISY.ID AS ID_POLISY,
		B_POLISY.RODZAJ AS RODZAJ_POLISY,
		B_POLISY.OCHRONA_OD,
		B_POLISY.OCHRONA_DO,
		B_SZKODY.ID AS ID_SZKODY,
		B_SZKODY.TYP_SZKODY,
		B_SZKODY.DATA_ZDARZENIA,
		CASE WHEN B_SZKODY.DATA_ZDARZENIA BETWEEN B_POLISY.OCHRONA_OD AND B_POLISY.OCHRONA_DO THEN 1 ELSE 0 END AS CZY_ZDARZENIE_OBCIAZA_POLISE
	FROM B_POLISY
	LEFT JOIN B_SZKODY
	ON B_POLISY.ID = B_SZKODY.ID_POLISY
;quit;


/* MERGE example */
data merge_example;
	merge B_POLISY (rename=(ID=ID_POLISY RODZAJ=RODZAJ_POLISY)) B_SZKODY (rename=(ID=ID_SZKODY));
	by ID_POLISY;
	if OCHRONA_OD < DATA_ZDARZENIA < OCHRONA_DO then do;
	 CZY_ZDARZENIE_OBCIAZA_POLISE = 1;
	end;
	else do;
	 CZY_ZDARZENIE_OBCIAZA_POLISE = 0;
	end;
run;


/* HASH TABLE kompletne*/
data hash_example;

     set  B_POLISY;
     length typ_szkody $ 1 data_zdarzenia id_szkody 8.;

    if _n_=1 then do;

         declare hash h_polisy(dataset:"B_SZKODY(rename=(ID = ID_SZKODY ID_POLISY = ID)", multidata: "Y");
         h_polisy.defineKey("ID");
         h_polisy.defineData('id_szkody','typ_szkody','data_zdarzenia');
         h_polisy.defineDone();

     end;

  
     set B_POLISY;
     rc = h_polisy.find(key:ID);
     if (rc = 0) then do;

          output;
          rc2 = h_polisy.find_next(key: ID);
          do while (rc2 = 0);
                output;
                rc2 = h_polisy.find_next(key: ID);
          end;
     end;
     else do;
          output;

     end;
     format data_zdarzenia YYMMDD10.;
     drop rc rc2;
run;

proc contents data=B_POLISY order=varnum;run;
proc contents data=B_SZKODY order=varnum;run;
proc print data=sql_example;run;
proc print data=merge_example;run;
proc print data=hash_example;run;














/* ZADANIE 3. */
proc sql;
	DROP TABLE MART_SZK;
	DROP TABLE MART_UB;
;quit;
proc sql;

	CREATE TABLE MART_UB (
		ID_REKORDU INT,
		ID_OSOBY INT,
		ID_POLISY VARCHAR(5),
		RODZAJ_POLISY VARCHAR(2),
		CONSTRAINT MART_UB_pkey PRIMARY KEY (ID_REKORDU)
)
;quit;
proc sql;

	CREATE TABLE MART_SZK (
		ID_REKORDU INT,
		ID_OSOBY INT,
		ID_SZKODY VARCHAR(5),
		ID_POLISY VARCHAR(5),
		ROLA VARCHAR(1),
		CONSTRAINT MART_UB_pkey PRIMARY KEY (ID_REKORDU)
)
;quit;
proc sql;
	insert into MART_UB values (1, 1, 'POL_1', 'OC');
	insert into MART_UB values (2, 1, 'POL_2', 'AC');
	insert into MART_UB values (3, 2, 'POL_3', 'OC');
	insert into MART_UB values (4, 3, 'POL_3', 'OC');
	insert into MART_UB values (5, 4, 'POL_4', 'OC');
	insert into MART_UB values (6, 5, 'POL_5', 'AC');
	insert into MART_SZK values (1, 1, 'SZK_1', 'POL_1', 'U');
	insert into MART_SZK values (2, 1, 'SZK_1', 'POL_1', 'S');
	insert into MART_SZK values (3, 6, 'SZK_1', 'POL_1', 'P');
	insert into MART_SZK values (4, 2, 'SZK_2', 'POL_3', 'U');
	insert into MART_SZK values (5, 3, 'SZK_2', 'POL_3', 'U');
	insert into MART_SZK values (6, 3, 'SZK_2', 'POL_3', 'S');
	insert into MART_SZK values (7, 5, 'SZK_3', 'POL_5', 'K');
	insert into MART_SZK values (8, 5, 'SZK_3', 'POL_5', 'P');
	insert into MART_SZK values (9, 1, 'SZK_4', 'POL_1', 'S');
	insert into MART_SZK values (10, 1, 'SZK_4', 'POL_1', 'U');
quit;


proc format;
value $role
'U'='ubezpieczony'
'S'='sprawca'
'P'='poszkodowany'
'K'='kierujacy'
other='INCORRECT CODE';
run;


proc contents data=MART_UB order=varnum;run;
proc contents data=MART_SZK order=varnum;run;
proc print data=MART_SZK;
format ROLA $role.;
run;
proc print data=MART_UB;
run;


/* SQL */
proc sql;
	SELECT
		MART_UB.*,
		"zero zdarzen" AS profil_osoby 
	FROM MART_UB
	WHERE MART_UB.ID_OSOBY NOT IN (SELECT MART_SZK.ID_OSOBY FROM MART_SZK)
	
	UNION
	
	SELECT
		MART_UB.*,
		"sprawca przynajmniej dwa razy" AS profil_osoby
	FROM MART_UB
	WHERE MART_UB.ID_OSOBY IN (
		SELECT DISTINCT ID_OSOBY FROM (
				SELECT
					MART_SZK.ID_OSOBY,
					MART_SZK.ROLA,
					COUNT(MART_SZK.ID_OSOBY) AS ID_OSOBY_COUNT
				FROM MART_SZK
				WHERE ROLA='S'
				GROUP BY
				MART_SZK.ROLA,
				MART_SZK.ID_OSOBY
				HAVING ID_OSOBY_COUNT >= 2
		)
	)
	
;quit;










/* ZADANIE 4. */
-- PostreSQL
DROP TABLE IF EXISTS LOGI_SYSTEMOWE;


CREATE TABLE IF NOT EXISTS LOGI_SYSTEMOWE (
    ID SERIAL PRIMARY KEY,
    RODZAJ TEXT,
    CZAS_AKTYWNOSCI TIMESTAMP,
    LOGIN TEXT
    )
;


-- Generuje 10.000 wierszy
INSERT INTO LOGI_SYSTEMOWE (RODZAJ, CZAS_AKTYWNOSCI, LOGIN)
SELECT
    -- Dostan wartosc losowa
    CASE FLOOR(random()*(4-0+1))+0
        WHEN 0 THEN 'LOGOWANIE'
        WHEN 1 THEN 'POBRANIE_PLIKU'
        WHEN 2 THEN 'WYSWIETLENIE_FORMULARZA'
        ELSE 'WYDRUK'
    END,
     -- Wygeneruj losowy CZAS_AKTYWNOSCI
    TIMESTAMP '2022-08-01 00:00:00' + (random() * (timestamp '2022-08-01 00:10:00' - timestamp '2022-08-01 00:00:00'))::interval,
    -- Wygeneruj losowy wartosc pola LOGIN
    'user_' || floor(random() * 1000)::text
FROM generate_series(1, 10000)
;


SELECT 
    LOGIN,
    RODZAJ,
    COUNT(*) AS LICZBA_AKTYWNOSCI
FROM 
    LOGI_SYSTEMOWE
GROUP BY 
    LOGIN,
    RODZAJ
HAVING 
    COUNT(*) > 100
;


SELECT 
    l1.ID,
    l1.RODZAJ,
    l1.CZAS_AKTYWNOSCI,
    l1.LOGIN,
    COUNT(l2.*) AS LICZBA_WYDARZEN_PRZED
FROM 
    LOGI_SYSTEMOWE l1
    LEFT JOIN LOGI_SYSTEMOWE l2 
        ON l2.LOGIN = l1.LOGIN 
        AND l2.CZAS_AKTYWNOSCI BETWEEN (l1.CZAS_AKTYWNOSCI - interval '5 minutes') AND l1.CZAS_AKTYWNOSCI
GROUP BY 
    l1.ID,
    l1.RODZAJ,
    l1.CZAS_AKTYWNOSCI,
    l1.LOGIN
ORDER BY 
    l1.login ASC,
    czas_aktywnosci ASC
;




